# coding=UTF-8
from AnalyticHierarchyProcess import AHP
from matplotlib import pyplot as plt

escolher_melhor_carro = AHP(
    metodo='Hierarquico',
    precisao=3,
    alternativas=['Valor', 'Desempenho', 'Segurança', 'Modelo'],
    criterios=['valor', 'desempenho', 'segurança', 'modelo'],
    subCriterios={
        'valor': ['Valor de Venda', 'Valor de Revenda'],
        'desempenho': ['Potencia do Motor', 'Eficiencia', 'Velocidade Máxima'],
        'segurança': ['Freios ABS', 'Airbags', 'Sistema de Estabilidade', 'Confiabilidade']
        #'modelo':['Sedan', 'SUV', 'Hatchback', 'Pickup', 'Crossover', 'Compactos', 'Esportivos', 'Eletricos']
    },
    matrizesPreferencias={
        'criterios': [
            [1, 3, 7, 3],
            [1 / 3, 1, 9, 1],
            [1 / 7, 1 / 9, 1, 1 / 7],
            [1 / 3, 1, 7, 1]
        ],
        'valor': [
            [1, 2, 5, 3],
            [1 / 2, 1, 2, 2],
            [1 / 5, 1 / 2, 1, 1 / 2],
            [1 / 3, 1 / 2, 2, 1]
        ],
        'Valor de Venda': [
            [1, 9, 9, 1, 1 / 2, 5],
            [1 / 9, 1, 1, 1 / 9, 1 / 9, 1 / 7],
            [1 / 9, 1, 1, 1 / 9, 1 / 9, 1 / 7],
            [1, 9, 9, 1, 1 / 2, 5],
            [2, 9, 9, 2, 1, 6],
            [1 / 5, 7, 7, 1 / 5, 1 / 6, 1]
        ],
        'Valor de Revenda': [
            [1, 1 / 1.13, 1.41, 1.15, 1.24, 1.19],
            [1.13, 1, 1.59, 1.3, 1.4, 1.35],
            [1 / 1.41, 1 / 1.59, 1, 1 / 1.23, 1 / 1.14, 1 / 1.18],
            [1 / 1.15, 1 / 1.3, 1.23, 1, 1.08, 1.04],
            [1 / 1.24, 1 / 4, 1.14, 1 / 1.08, 1, 1 / 1.04],
            [1 / 1.19, 1 / 1.35, 1.18, 1 / 1.04, 1.04, 1]
        ],
        'desempenho': [
            [1, 1.5, 4, 4, 4, 5],
            [1 / 1.5, 1, 4, 4, 4, 5],
            [1 / 4, 1 / 4, 1, 1, 1.2, 1],
            [1 / 4, 1 / 4, 1, 1, 1, 3],
            [1 / 4, 1 / 4, 1 / 1.2, 1, 1, 2],
            [1 / 5, 1 / 5, 1, 1 / 3, 1 / 2, 1]
        ],
        'Potencia do Motor': [
            [1, 3, 4, 1 / 2, 2, 2],
            [1 / 3, 1, 2, 1 / 5, 1, 1],
            [1 / 4, 1 / 2, 1, 1 / 6, 1 / 2, 1 / 2],
            [2, 5, 6, 1, 4, 4],
            [1 / 2, 1, 2, 1 / 4, 1, 1],
            [1 / 2, 1, 2, 1 / 4, 1, 1]
        ],
        'Eficiencia': [
            [1, 1, 5, 7, 9, 1 / 3],
            [1, 1, 5, 7, 9, 1 / 3],
            [1 / 5, 1 / 5, 1, 2, 9, 1 / 8],
            [1 / 7, 1 / 7, 1 / 2, 1, 2, 1 / 8],
            [1 / 9, 1 / 9, 1 / 9, 1 / 2, 1, 1 / 9],
            [3, 3, 8, 8, 9, 1]
        ],
        'Velocidade Máxima': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'segurança': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Freios ABS': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Airbags': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Sistema de Estabilidade': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Confiabilidade': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'modelo': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Sedan': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'SUV': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Hatchback': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Pickup': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Crossover': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Compactos': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Esportivos': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]

        ],
        'Eletricos': [
            [1, 1, 7, 5, 9, 6],
            [1, 1, 7, 5, 9, 6],
            [1 / 7, 1 / 7, 1, 1 / 6, 3, 1 / 3],
            [1 / 5, 1 / 5, 6, 1, 7, 5],
            [1 / 9, 1 / 9, 1 / 3, 1 / 7, 1, 1 / 5],
            [1 / 6, 1 / 6, 3, 1 / 5, 5, 1]
    ]
    },
    log=True
)
resultado = escolher_melhor_carro.Resultado()
print(resultado)

plt.bar(resultado.keys(), resultado.values())
plt.ylabel("Prioridade")
plt.show()